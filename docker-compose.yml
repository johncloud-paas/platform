version: '3.8'

services:
  traefik:
    image: traefik:v3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 25
        published: 25
        protocol: tcp
        mode: host
      - target: 993
        published: 993
        protocol: tcp
        mode: host
      - target: 587
        published: 587
        protocol: tcp
        mode: host
      - target: 32400
        published: 32400
        protocol: tcp
        mode: host
      - target: 7687
        published: 7687
        protocol: tcp
        mode: host
    configs:
      - source: traefik-dynamic-config.yml
        target: /conf.d/traefik-dynamic-config.yml
    volumes:
      - traefik-certs:/letsencrypt                     # Persist ACME certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-logs:/logs
    networks:
      default:
        ipv4_address: $TRAEFIK_IP
    depends_on:
      - oauth
    environment:
      - TZ=$TZ
    command:
      # Enable Swarm provider and disable default exposure
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --providers.swarm.exposedbydefault=false
      - --providers.file.directory=/conf.d
      - --providers.file.watch=true
      # TCP entrypoints
      - --entrypoints.plex.address=:32400/tcp
      - --entrypoints.plex.proxyProtocol.trustedIPs=$UNIVERSE_NET.0/24
      - --entrypoints.smtp.address=:25/tcp
      - --entrypoints.smtp.proxyProtocol.trustedIPs=$UNIVERSE_NET.0/24
      - --entrypoints.submissions.address=:465/tcp
      - --entrypoints.submissions.proxyProtocol.trustedIPs=$UNIVERSE_NET.0/24
      - --entrypoints.imaps.address=:993/tcp
      - --entrypoints.imaps.proxyProtocol.trustedIPs=$UNIVERSE_NET.0/24
      - --entrypoints.bolt.address=:7687/tcp
      # HTTP entrypoint and redirect to HTTPS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # HTTPS entrypoint
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http3.advertisedPort=443
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains.main=$HOST
      - --entrypoints.websecure.http.tls.domains.sans=*.$HOST
      - --entrypoints.websecure.http.middlewares=default@file
      - --entrypoints.websecure.forwardedHeaders.trustedIPs=$UNIVERSE_NET.0/24
      - --entrypoints.websecure.proxyprotocol=true
      - --entrypoints.websecure.proxyprotocol.trustedips=$UNIVERSE_NET.0/24
      # Let's Encrypt (ACME) configuration
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.websecure.http.tls.certresolver=letsencrypt"
      - "--api.insecure=true"
      - --accesslog=true
      - --accesslog.filepath=/logs/traefik.log
      - --accesslog.format=json
      - --accesslog.filters.statusCodes=200-299,400-599
      - --accesslog.bufferingSize=0
      - --accesslog.fields.headers.defaultMode=drop
      - --accesslog.fields.headers.names.User-Agent=keep
      - --experimental.plugins.traefik-api-token-middleware.modulename=github.com/Aetherinox/traefik-api-token-middleware
      - --experimental.plugins.traefik-api-token-middleware.version=v0.1.4
      - --experimental.plugins.bouncer.moduleName=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
      - --experimental.plugins.bouncer.version=v1.4.4
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        # (Optional) Traefik dashboard on HTTPS
        - "traefik.http.routers.traefik.rule=Host(`traefik.${HOST}`)"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.tls=true"
        - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
        - "traefik.http.routers.traefik.middlewares=forward-auth-verify"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "homepage.group=Platform"
        - "homepage.name=Traefik"
        - "homepage.icon=traefik.svg"
        - "homepage.href=https://traefik.$HOST"
        - "homepage.description=Traefik reverse proxy"
        - "homepage.widget.type=traefik"
        - "homepage.widget.url=https://traefik.$HOST"

  crowdsec:
    image: crowdsecurity/crowdsec
    ports:
      - "127.0.0.1:9876:8080"
    volumes:
      # crowdsec container data
      - crowdsec-data:/var/lib/crowdsec/data
      - crowdsec-config:/etc/crowdsec
      # log bind mounts into crowdsec
      - /var/log/auth.log:/var/log/auth.log:ro
      - /var/log/syslog:/var/log/syslog:ro
      - traefik-logs:/var/logs/traefik:ro
    environment:
      - GID=1000
      - COLLECTIONS=crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/base-http-scenarios crowdsecurity/sshd crowdsecurity/linux crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-crs
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - /:/host:ro,rslave
    environment:
      - TZ=$TZ
    depends_on:
      - traefik
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command: -max_procs=2 -docker_only=true
    # command: -max_procs=2 -docker_only=true -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxdb:8086 -storage_driver_user=$INFLUXDB_INIT_USERNAME -storage_driver_password=$INFLUXDB_INIT_ADMIN_TOKEN
    environment:
      - TZ=$TZ
    depends_on:
      - traefik
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  pdc:
    # https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect/#private-data-source-connect-pdc-concepts
    image: grafana/pdc-agent:latest
    depends_on:
      - traefik
    command: ["-token","$GRAFANA_PDC_TOKEN","-cluster","$GRAFANA_PDC_CLUSTER","-gcloud-hosted-grafana-id","$GRAFANA_PDC_GCP_ID"]
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  loki:
    image: grafana/loki:latest
    user: "0:0"
    depends_on:
      - traefik
    configs:
      - source: loki-config.yaml
        target: /etc/loki/loki-config.yaml
    volumes:
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    environment:
      - TZ=$TZ
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  promtail:
    image:  grafana/promtail:latest
    depends_on:
      - traefik
    configs:
      - source: promtail-config.yaml
        target: /etc/promtail/docker-config.yaml
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-logs:/var/logs/traefik:ro
    command: -config.file=/etc/promtail/docker-config.yaml
    environment:
      - TZ=$TZ
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus:main
    user: "0:0"
    depends_on:
      - traefik
    configs:
      - source: prometheus-config.yaml
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus-db:/prometheus
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - "--web.route-prefix=/"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    environment:
      - TZ=$TZ
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  influxdb:
    image: influxdb:2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=$INFLUXDB_INIT_USERNAME
      - DOCKER_INFLUXDB_INIT_PASSWORD=$INFLUXDB_INIT_PASSWORD
      - DOCKER_INFLUXDB_INIT_ORG=$INFLUXDB_INIT_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET=$INFLUXDB_INIT_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=$INFLUXDB_INIT_ADMIN_TOKEN
      - TZ=$TZ
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  certdumper:
    image: ghcr.io/kereis/traefik-certs-dumper:latest
    depends_on:
      - traefik
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - traefik-certs:/traefik:ro
      - traefik-dump-certs:/output
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  redis:
    image: redis:7.2.0
    depends_on:
      - traefik
    environment:
      - TZ=$TZ
      - ENABLE_OVERCOMMIT_MEMORY=true
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager

  oauth:
    image: thomseddon/traefik-forward-auth:latest
    secrets:
      - traefik-forward-auth.ini
    environment:
      - TZ=$TZ
      # - PROVIDERS_GOOGLE_CLIENT_ID=$PROVIDERS_GOOGLE_CLIENT_ID
      # - PROVIDERS_GOOGLE_CLIENT_SECRET=$PROVIDERS_GOOGLE_CLIENT_SECRET
      # - SECRET=$OAUTH_SECRET
      - AUTH_HOST=oauth.$HOST
      - COOKIE_DOMAIN=$HOST
      - WHITELIST=$WHITELIST
      - INSECURE_COOKIE=$INSECURE_COOKIE
    command: ["traefik-forward-auth", "--config", "/run/secrets/traefik-forward-auth.ini"]
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.forward.rule=Host(`oauth.$HOST`)"
        - "traefik.http.routers.forward.entrypoints=websecure"
        - "traefik.http.middlewares.forward-auth-verify.forwardauth.address=http://oauth:4181"      
        - "traefik.http.middlewares.forward-auth-verify.forwardauth.authResponseHeaders=X-Forwarded-User"
        - "traefik.http.routers.forward.tls.certresolver=letsencrypt"
        - "traefik.http.services.forward.loadbalancer.server.port=4181"

  portainer:
    image: portainer/portainer-ee:latest
    depends_on:
      - traefik
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.$HOST`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "homepage.group=Platform"
        - "homepage.name=Portainer"
        - "homepage.icon=portainer.svg"
        - "homepage.href=https://portainer.$HOST/#!/2/docker/stacks"
        - "homepage.description=Container Management Software"

  # homepage:
  #   image: ghcr.io/gethomepage/homepage:latest
  #   environment:
  #     - HOMEPAGE_ALLOWED_HOSTS=home.$HOST
  #   depends_on:
  #     - traefik
  #     - oauth
  #   volumes:
  #     - homepage-conf:/app/config # Make sure your local config directory exists
  #     - /var/run/docker.sock:/var/run/docker.sock:ro # (optional) For docker integrations
  #   deploy:
  #     replicas: 1
  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.routers.homepage.rule=Host(`home.$HOST`)"
  #       - "traefik.http.routers.homepage.entrypoints=websecure"
  #       - "traefik.http.routers.homepage.tls.certresolver=letsencrypt"
  #       - "traefik.http.routers.homepage.middlewares=forward-auth-verify"
  #       - "traefik.http.services.homepage.loadbalancer.server.port=3000"

configs:
  loki-config.yaml:
    external: true
  prometheus-config.yaml:
    external: true
  promtail-config.yaml:
    external: true
  traefik-dynamic-config.yml:
    external: true

volumes:
  traefik-certs:
  traefik-dump-certs:
  traefik-logs:
  portainer:
  homepage-conf:
  crowdsec-data:
  crowdsec-config:
  influxdb-data:
  influxdb-config:
  prometheus-db:
  loki-data:

secrets:
  traefik-forward-auth.ini:
    external: true

networks:
  default:
    external: true
    name: $TRAEFIK_NETWORK
    
